group_by
--get me unique job_ids
select distinct job_id from employees;

-- get me average salary for IT_PROG
SELECT AVG(salary)
FROM employees
WHERE job_id = 'AC_ACCOUNT';

-- get me average salary for each job_id
select job_id,avg(salary)
from employees
group by job_id;


--get me job_ids where their avg salary is more than 5k
select job_id,avg(salary),count(*),sum(salary)
from employees
group by job_id
having avg(salary) >5000;

--get me job_ids where their avg salary is more than 5k
select job_id,avg(salary),count(*),sum(salary)
from employees
where salary >5000
group by job_id;



like_agg
-- get me all info who is working as IT _PROG or SA_REP

select * from employees
where job_id in('IT_PROG','SA_REP');

--how many employee are working as IT_PROG or SA_REP
select count(*) from employees
where job_id in('IT_PROG','SA_REP');

--how many employees making more than 8000
select count(*) from employees
where salary >8000;

-- how many unique first names we have ?
select count(distinct first_name) from employees;

-- get me all employees information based on who is making more salary to low salary
select * from employees
order by salary asc;

--desc 9-0 Z-A
--asc 0-9 a-Z

--get me all emp info order by alphabetical based on firstname
select *
from employees
order by first_name;

--NOTE: default order type is asc if you dont specify after column name

-- get me alll employees whose first name starts with C
select *
from employees
where first_name like 'C%';

--get me 5 letter first names where the middle char is z;

select *
from employees
where first_name like '__z__';

--get me first name where second char is u;
select *
from employees
where first_name like '_u%';


select * from employees;
--find me minimum salary
select min(salary) from employees;

--find me max salary
select max(salary) from employees;

--find me avg salary
select avg(salary) from employees;

--round

select round(avg(salary),2) from employees;

select sum(salary) from employees;








select
select * from employees;
-- reads all column from employees table

select * from departments;
-- reads all column from departments table

select first_name from employees;
--get only firstname from employees table

--displaty city names
select city from locations;

--get me first_name,last_name and salary

select first_name,last_name,salary from employees;

--get me street address and postal code
SELECT street_address, postal_code
FROM locations;

select distinct first_name from employees;
--remove duplicates


Where
-- I want to see firstname lastname phone number of david(s)

select first_name,last_name,phone_number
from employees
where first_name = 'David' and last_name = 'Lee';

--get me all information who is making more than 7000 salary
select * from employees
where salary > 7000;

--get me email of who is making less than 4000
select email, salary from employees
where salary < 4000;

--get me all info who is working as IT_PROG or SA_REP
select * from employees
where job_id = 'IT_PROG' or job_id = 'SA_REP';


--get me first_name,last_name salary who is making more than 5000 and less than 10000
select first_name,last_name,salary
from employees
where salary >= 5000 and salary <=10000;

select first_name,last_name,salary
from employees
where salary between 5000 and 10000;

--get me all info where emp_id 130 to 170
select *
from employees
where employee_id between 130 and 170;

--get me all info where employee_id 135 176 154 129
select *
from employees
where employee_id = 135 or employee_id = 176 or employee_id = 154 or  employee_id = 129;

select *
from employees
where employee_id in(135,176,154,129);

--get me city of where country_id IT,US,UK

select city,country_id
from locations
where country_id in('IT','US','UK');






string_man_views
--how can we rename the column that we displayed
select first_name as "given_name", last_name as "surname"
from employees;

--text functions,string mani.
--java first_name+" "+last_name
-- in sql concat is ||

select first_name||' '||last_name as "full_name"
from employees;

--Task;
--add @gmail.com and name new column to full_email
select email from employees;

select email||'@gmail.com' as "full_email"
from employees;

--making all lowercase
select lower(email||'@gmail.com') as "full_email"
from employees;

--upper case
select upper(email||'@gmail.com') as "full_email"
from employees;

--length(value)
select first_name,length(first_name) as "length_name"
from employees
order by "length_name" desc;

--substr(colName,begIndex,NumberOfChar)
select substr(first_name,0,1)||'.'||substr(last_name,0,1) as "initials"
from employees;

select substr(first_name,0,1)||'.'||substr(last_name,0,1) as "initials",
first_name||' '||last_name as "full_name",lower(email||'@gmail.com') as "full_email"
from employees;

--VIEW
CREATE VIEW Emaillist_jamal as select substr(first_name,0,1)||'.'||substr(last_name,0,1) as "initials",
first_name||' '||last_name as "full_name",lower(email||'@gmail.com') as "full_email"
from employees;

select "full_name"
from Emaillist;

--to remove view
drop view Emaillist_jamal;




sub_interview
--find the highest 14th salary
--list salary high to low without duplicate values
select distinct salary
from employees
order by salary desc;

--find the highest 14th salary(removing duplicate values)
select min(salary)
from (select distinct salary from employees order by salary desc)
where rownum <15;


--find employee info who is making 14th highest salary (without duplicates)

select *
from employees
where salary = (select min(salary)
                    from (select distinct salary from employees order by salary desc)
                                where rownum <15 );


subquery_rownum
--how to find employees information of who is making highest salary in the company ?

--get me the highest salary
select max(salary) from employees;

--highest salary employee information
select *
from employees
where salary = 24000;


--subquery solution in one shot
select *
from employees
where salary = (select max(salary) from employees);

--finding second highest salary
--get highest salary first
select max(salary) from employees;

--highest after 24k
select max(salary)
from employees
where salary <24000;

--one shot combining two queries

select max(salary)
from employees
where salary < (select max(salary) from employees);

--employee information of who is making second highest salary ?
select *
from employees
where salary = (select max(salary)from employees where salary < (select max(salary) from employees) );

----------
select * from employees;

select * from employees
order by salary desc;

select *
from employees
where rownum < 11;

--list the employees who is making top 10 salary

--get the first 10 people then order them high to low based on salary
select *
from employees
where rownum < 11
order by salary desc;

--order all employees based on salary high to low then display only first 10 result
select *
from (select * from employees order by salary desc)
where rownum < 11;



alter_table
select * from scrumteam;

--adding new column
ALTER TABLE scrumteam ADD salary Integer;

--update existing employees salary

UPDATE scrumteam SET salary = 100000 WHERE emp_id = 1;

UPDATE scrumteam SET salary = 90000 WHERE emp_id = 2;

UPDATE scrumteam SET salary = 120000 WHERE emp_id = 4;

--rename the column
ALTER TABLE scrumteam RENAME COLUMN salary TO annual_salary;


--delete, drop column
ALTER TABLE scrumteam DROP COLUMN annual_salary;

--how to change table name ?
ALTER TABLE scrumteam RENAME TO agileteam;

select * from agileteam;

commit;

--truncate, if we want to delete all data from the table, but still keep the table structure, we use truncate

TRUNCATE TABLE agileteam;

--If we want to delete the table and data together
DROP TABLE agileteam;




create_table
/*
create table syntax:
    create table TableName(
        colName1 DataType Constraints,
        colName2 DataType Constraints(optional)
        colName3 DataType Constraints,
        ...
    );
*/

CREATE TABLE ScrumTeam(
        Emp_ID Integer Primary Key,
        FirstName varchar(30) not null,
        LastName varchar(30),
        JobTitle varchar(20)

);

select * from scrumteam;

/*
INSERT INTO tableName (column1, column2,…)
VALUES (value1, value2 … );
*/

INSERT INTO ScrumTeam (emp_id,firstname,lastname,jobtitle)
VALUES (1,'Severus','Snape','Tester');

INSERT INTO ScrumTeam VALUES (2,'Harold','Finch','Developer');

INSERT INTO ScrumTeam VALUES (3,'Phoebe','Buffay','ScrumMaster');

INSERT INTO ScrumTeam VALUES (4,'Michael','Scofield','PO');


--how to update data
/*
UPDATE table_name
SET column1 = value1,
column2 = value2 , …
WHERE condition;
*/

UPDATE ScrumTeam
SET jobtitle = 'Tester'
WHERE emp_id = 4;

--Delete from table
/*
DELETE FROM table_name
WHERE condition;
*/
DELETE FROM ScrumTeam
WHERE emp_id = 3;

--saving changes
commit;


customerandaddress
CREATE TABLE address(

address_id Integer PRIMARY KEY,
address VARCHAR(50) NOT NULL,
phone Integer NOT NULL

);


INSERT INTO address (address_id, address, phone) VALUES (5,  '1913 Hanoi Way'  ,  28303384);
INSERT INTO address (address_id, address, phone) VALUES (7,  '692 Joliet Street'  ,  44847719);
INSERT INTO address (address_id, address, phone) VALUES (8,  '1566 Inegl Manor'  ,  70581400);
INSERT INTO address (address_id, address, phone) VALUES (10,  '1795 Santiago '  ,  86045262);
INSERT INTO address (address_id, address, phone) VALUES (11,  '900 Santiago '  ,  16571220);


CREATE TABLE customer(

customer_id Integer PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50)NOT NULL,
address_id Integer REFERENCES address(address_id)

);


INSERT INTO customer (customer_id, first_name, last_name, address_id) VALUES (1, 'Mary' ,  'Smith',  5);
INSERT INTO customer (customer_id, first_name, last_name, address_id) VALUES (2,  'Patricia' ,  'Johnson' ,  NULl);
INSERT INTO customer (customer_id, first_name, last_name, address_id) VALUES (3,  'Linda' ,  'Williams' ,  7);
INSERT INTO customer (customer_id, first_name, last_name, address_id) VALUES (4, 'Barbara' ,  'Jones' , 8);
INSERT INTO customer (customer_id, first_name, last_name, address_id) VALUES (5,  'Elizabeth' ,  'Brown' ,  NULL);


commit work;

join1
select * from customer;

select * from address;

select first_name,last_name,address,phone
from customer join address
on customer.address_id = address.address_id;

select first_name,last_name,c.address_id,address,phone
from customer c left join address a
on c.address_id = a.address_id;

select first_name,last_name,c.address_id,a.address_id,address,phone
from customer c right join address a
on c.address_id = a.address_id;


select first_name,last_name,c.address_id,a.address_id,address,phone
from customer c full join address a
on c.address_id = a.address_id;


join2
select * from employees;

select * from departments;


select first_name,last_name,department_name
from employees e left join departments d
on e.department_id = d.department_id;

create_dev_test
create table Developers(
Id_Number Integer primary key,
Names varchar(30),
Salary Integer
);
create table Testers(
Id_Number Integer primary key,
Names varchar(30),
Salary Integer
);

insert into developers values (1, 'Mike', 155000);
insert into developers values (2, 'John', 142000);
insert into developers values (3, 'Steven', 850000);
insert into developers values (4, 'Maria', 120000);
insert into testers values (1, 'Steven', 110000);
insert into testers values(2, 'Adam', 105000);
insert into testers values (3, 'Lex', 100000);

commit work;



join3
--get me first_name,last_name and department name for all employees

select * from employees;

select * from departments;

select first_name,last_name,department_name
from employees e left join departments d
on e.department_id = d.department_id
where e.department_id is null;

--get me first_name,last_name and department_name,city for all employees
select first_name,last_name,department_name,city
from employees e join departments d
on e.department_id = d.department_id
join locations l
on d.location_id = l.location_id;

--get me firstname,lastname and deparment name, city,country_name for all employees;
select first_name , last_name , department_name, city,country_name
from employees e join departments d
on e.department_id = d.department_id
join locations L
on d.location_id = l.location_id
join countries C
on c.country_id = l.country_id;

self_join

--get me all employees firstname, lastname and their managers first and lastname

select employee_id,first_name,last_name,manager_id from employees;

select e1.employee_id,e1.first_name,e1.last_name,e1.manager_id,e2.employee_id,e2.first_name,e2.last_name
from employees e1 left join employees e2
on e1.manager_id = e2.employee_id
order by e1.employee_id;

--BREAK UNTIL 12:15

set_operators
select * from testers
union
select * from developers;

select names from testers
union
select names from developers;


select names from developers
intersect
select names from testers;

--how to find duplicate names in employees table

select  first_name,count(*)
from employees
group by first_name
having count(*) >1;





